<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"HostError call"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Array of byte</VariableType>
      <ByteLength>5</ByteLength>
      <Address>engine.dll+B8C5E</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"call ds:Msg"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Array of byte</VariableType>
      <ByteLength>6</ByteLength>
      <Address>engine.dll+BEA18</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"call ds:Warning"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Array of byte</VariableType>
      <ByteLength>6</ByteLength>
      <Address>engine.dll+B8D30</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"HostError fix"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov eax,00000000 // block Host_Error call
//call dword ptr[engine.dll+2EB5A4] // replace Host_Error call with tier0.Msg call
call dword ptr[engine.dll+2EB5AC] // replace Host_Error call with tier0.Warning call
jmp exit

originalcode:
call engine.dll+1A11B0

exit:
jmp returnhere

"engine.dll"+B8C5E:
jmp newmem
returnhere:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"engine.dll"+B8C5E:
call engine.dll+1A11B0
//Alt: db E8 4D 85 0E 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
